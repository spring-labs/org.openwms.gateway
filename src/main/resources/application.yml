server:
  port: ${PORT:8086}

spring:
  application:
    name: openleap-gateway
  cloud:
    gateway:
      default-filters:
        - TokenRelay=
      routes:
        - id: report-service
          uri: lb://report-service
          predicates:
            - Path=/reports/**
  security:
    oauth2:
      client:
        registration:
          gateway-client:
            provider: spring
            client-id: generated
            client-secret: generated
            authorization-grant-type: authorization_code
            redirect-uri: 'http://127.0.0.1:8086/login/oauth2/code/{registrationId}'
            scope: openid, profile, report-service
            client-name: gateway-client
        provider:
          spring:
            issuer-uri: http://auth-server:8899
            token-uri: http://auth-server:8899/oauth2/token
        resourceserver:
          jwt:
            jwk-set-uri: http://auth-server:8899/oauth2/jwks
oleap:
  eureka:
    url: http://user:sa@localhost:8761
    zone: ${oleap.eureka.url}/eureka/
  srv:
    hostname: localhost
    protocol: http
  client:
    registration:
      instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
      registration-endpoint: http://auth-server:8899/connect/register
      unregistration-endpoint: http://auth-server:8899/internal/client/unregister
      registration-username: register-client
      registration-password: secret
      token-endpoint: http://auth-server:8899/oauth2/token
      registration-scopes: client.create
      grant-types: client_credentials
      base-url: http://127.0.0.1:8086

eureka:
  client:
    instance-info-replication-interval-seconds: 10 # default is 30
    registryFetchIntervalSeconds: 5 # SBA
    service-url:
      defaultZone: ${oleap.eureka.zone} # Must be camelCase
  instance:
    health-check-url-path: /actuator/health
    hostname: ${oleap.srv.hostname}
    # Request a lease with a validity of 5 seconds. If until then the
    # lease has not been renewed, it expires and the Eureka server can evict it.
    # Default: 90s
    lease-expiration-duration-in-seconds: 5

    # The cadence of lease renewal, i.e. how often a heartbeat is sent to Eureka server.
    # In this case every 2 seconds. Use this only for development / debugging. In production use the ...
    # Default: 30s
    lease-renewal-interval-in-seconds:    2
    metadata-map:
      config-protocol: http # The protocol used to access the config server
      username: ${spring.security.user.name}
      password: ${spring.security.user.password}
      protocol: ${oleap.srv.protocol}
      zone: ${oleap.eureka.zone}
    non-secure-port-enabled: true
    prefer-ip-address: true
    secure-port-enabled: false
    statusPageUrl: ${oleap.srv.protocol}://${oleap.srv.hostname}:${server.port}/actuator/info
    healthCheckUrl: ${oleap.srv.protocol}://${oleap.srv.hostname}:${server.port}/actuator/health
    homePageUrl: ${oleap.srv.protocol}://${oleap.srv.hostname}:${server.port}/

management:
  endpoints:
    web:
      exposure:
        include: "*"
logging:
  level:
    root: INFO
#    org.springframework.web: INFO
#    org.springframework.security: TRACE
#    org.springframework.security.oauth2: TRACE